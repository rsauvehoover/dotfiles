--[[
 THESE ARE EXAMPLE CONFIGS FEEL FREE TO CHANGE TO WHATEVER YOU WANT
 `lvim` is the global options object
]]

-- TODO: Probably split things off into their own configs for specific parts

-- vim options
vim.opt.shiftwidth = 2
vim.opt.tabstop = 2
vim.opt.wrap = true
vim.opt.timeoutlen = 250 -- timeout length for mapped sequences

-- general
lvim.log.level = "warn"
lvim.reload_config_on_save = false
lvim.format_on_save = {
	enabled = true,
	timeout = 1000,
}
-- disable auto match closing for brackets etc.
lvim.builtin.autopairs.active = false
-- disable gitsigns since we use gitdiff
-- to disable icons and use a minimalist setup, uncomment the following
-- lvim.use_icons = false

-- keymappings <https://www.lunarvim.org/docs/configuration/keybindings>
lvim.leader = "space"
-- add your own keymapping
lvim.keys.normal_mode["<C-s>"] = ":w<cr>"
-- no need to press shift to enter command mode
vim.keymap.set({ "n", "x" }, ";", ":")

lvim.keys.normal_mode["<S-l>"] = ":BufferLineCycleNext<CR>"
lvim.keys.normal_mode["<S-h>"] = ":BufferLineCyclePrev<CR>"

-- Change Telescope navigation to use j and k for navigation and n and p for history in both input and normal mode.
-- we use protected-mode (pcall) just in case the plugin wasn't loaded yet.
local _, actions = pcall(require, "telescope.actions")
lvim.builtin.telescope.defaults.mappings = {
	-- for input mode
	i = {
		["<C-j>"] = actions.move_selection_next,
		["<C-k>"] = actions.move_selection_previous,
		["<C-n>"] = actions.cycle_history_next,
		["<C-p>"] = actions.cycle_history_prev,
	},
	-- for normal mode
	n = {
		["<C-j>"] = actions.move_selection_next,
		["<C-k>"] = actions.move_selection_previous,
	},
}

-- Show line diagnostics in hover window
lvim.keys.normal_mode["g?"] = "<cmd>lua vim.diagnostic.open_float(nil, {focus=false, scope='cursor'})<CR>"

-- -- Use which-key to add extra bindings with the leader-key prefix
lvim.builtin.which_key.mappings["W"] = { "<cmd>noautocmd w<cr>", "Save without formatting" }
-- Telescope whichkey bindings
lvim.builtin.which_key.mappings["P"] = { "<cmd>Telescope projects<CR>", "Projects" }
-- Additional git whichkey bindings
lvim.builtin.which_key.mappings["g"]["d"] = {
	name = "+Diff View",
	o = { "<cmd>DiffviewOpen<CR>", "Open Diff View" },
	c = { "<cmd>DiffviewClose<CR>", "Close Diff View" },
	r = { "<cmd>DiffviewRefresh<CR>", "Refresh Diff View" },
	t = { "<cmd>DiffviewToggleFiles<CR>", "Toggle file panel" },
	f = { "<cmd>DiffviewFocusFiles<CR>", "Focus file panel" },
	h = { "<cmd>DiffviewFileHistory %<CR>", "File history" },
	H = { "<cmd>DiffviewFileHistory<CR>", "Branch history" },
}
-- Trouble whichkey binding
lvim.builtin.which_key.mappings["t"] = {
	name = "+Trouble",
	t = { "<cmd>TroubleToggle<cr>", "Toggle" },
	r = { "<cmd>Trouble lsp_references<cr>", "References" },
	f = { "<cmd>Trouble lsp_definitions<cr>", "Definitions" },
	d = { "<cmd>Trouble document_diagnostics<cr>", "Diagnostics" },
	q = { "<cmd>Trouble quickfix<cr>", "QuickFix" },
	s = { "<cmd>TodoQuickFix<cr>", "TODO QuickFix list" },
	l = { "<cmd>Trouble loclist<cr>", "LocationList" },
	w = { "<cmd>Trouble workspace_diagnostics<cr>", "Workspace Diagnostics" },
}
-- LSP restart keybind
lvim.builtin.which_key.mappings["l"]["l"] = { "<cmd>LspRestart<CR>", "Restart LSP" }

-- Change theme settings
lvim.colorscheme = "gruvbox-material"
vim.g.gruvbox_material_background = "medium"

-- Change statusline look
lvim.builtin.lualine.style = "default"

-- Optional features
lvim.builtin.alpha.active = true
lvim.builtin.alpha.mode = "dashboard"
lvim.builtin.terminal.active = true
lvim.builtin.nvimtree.setup.view.side = "left"
lvim.builtin.nvimtree.setup.renderer.icons.show.git = false

-- Automatically install missing parsers when entering buffer
lvim.builtin.treesitter.auto_install = true

lvim.builtin.treesitter.ignore_install = { "haskell" }

-- -- always installed on startup, useful for parsers without a strict filetype
lvim.builtin.treesitter.ensure_installed = {
	"bash",
	"c",
	"javascript",
	"json",
	"lua",
	"python",
	"typescript",
	"tsx",
	"yaml",
	"vue",
	"comment",
	"regex",
	"markdown_inline",
}

-- generic LSP settings <https://www.lunarvim.org/docs/languages#lsp-support>

-- enable automatic installation of servers
lvim.lsp.installer.setup.automatic_installation = true

-- linters and formatters <https://www.lunarvim.org/docs/languages#lintingformatting>
local formatters = require("lvim.lsp.null-ls.formatters")
formatters.setup({
	{ command = "stylua" },
	{
		command = "prettier",
		filetypes = { "typescript", "typescriptreact", "javascript", "vue" },
	},
})
local linters = require("lvim.lsp.null-ls.linters")
linters.setup({
	{ command = "flake8", filetypes = { "python" } },
	{
		command = "shellcheck",
		args = { "--severity", "warning" },
	},
	{
		command = "eslint",
		filetypes = { "typescript", "typescriptreact", "javascript", "vue" },
	},
})

-- Additional Plugins <https://www.lunarvim.org/docs/plugins#user-plugins>
lvim.plugins = {
	{
		"folke/trouble.nvim",
		cmd = "TroubleToggle",
	},
	{
		"sindrets/diffview.nvim",
		event = "BufRead",
	},
	{
		"sainnhe/gruvbox-material",
	},
	{
		"max397574/better-escape.nvim",
		config = function()
			require("better_escape").setup()
		end,
	},
	{
		"folke/todo-comments.nvim",
		dependencies = "nvim-lua/plenary.nvim",
		config = function()
			require("todo-comments").setup()
		end,
		event = "BufRead",
	},
	{
		"github/copilot.vim",
		config = function()
			-- disable cmp's ghost text override
			lvim.builtin.cmp.experimental.ghost_text = false
			vim.g.copilot_filetypes = { xml = false }
			vim.g.copilot_no_tab_map = true
			vim.api.nvim_set_keymap("i", "<M-p>", 'copilot#Accept("\\<CR>")', { silent = true, expr = true })
			vim.api.nvim_set_keymap("i", "<M-k>", "copilot#Previous()", { silent = true, expr = true })
			vim.api.nvim_set_keymap("i", "<M-j>", "copilot#Next()", { silent = true, expr = true })
			vim.api.nvim_set_keymap("i", "<M-d>", "copilot#Dismiss()", { silent = true, expr = true })
			vim.api.nvim_set_keymap("i", "<M-]>", "copilot#Suggest()", { silent = true, expr = true })

			vim.g.copilot_enabled = 0
			local copilot_on = false
			vim.api.nvim_create_user_command("CopilotToggle", function()
				if copilot_on then
					vim.api.nvim_command("Copilot disable")
					vim.api.nvim_command("exec copilot#Dismiss()")
					print("Copilot OFF")
				else
					vim.api.nvim_command("Copilot enable")
					vim.api.nvim_command("exec copilot#Suggest()")
					print("Copilot ON")
				end
				copilot_on = not copilot_on
			end, { nargs = 0 })

			vim.api.nvim_set_keymap("i", "<M-\\>", "<cmd>CopilotToggle<cr>", {})

			lvim.builtin.which_key.mappings["C"] = {
				name = "+Copilot",
				p = { "<cmd>copilot#Accept('\\<CR>')<cr>", "Accept Snippet" },
				k = { "<cmd>copilot#Previous()<cr>", "Previous Snippet" },
				j = { "<cmd>copilot#Next()<cr>", "Next Snippet" },
				d = { "<cmd>copilot#Dismiss()<cr>", "Dismiss Snippet" },
				s = { "<cmd>copilot#Suggest()<cr>", "Suggest Completion" },
				t = { "<cmd>CopilotToggle<cr>", "Toggle Copilot" },
			}
		end,
	},
}

-- -- Autocommands (`:help autocmd`) <https://neovim.io/doc/user/autocmd.html>
-- vim.api.nvim_create_autocmd("FileType", {
--   pattern = "zsh",
--   callback = function()
--     -- let treesitter use bash highlight for zsh files as well
--     require("nvim-treesitter.highlight").attach(0, "bash")
--   end,
-- })
